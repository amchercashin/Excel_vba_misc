Option Explicit

Function StringToArray(str As String, StrLen As Long) As String()

    Dim NumElems As Long
    Dim Temp() As String
    Dim i As Long

    NumElems = (Len(str) / StrLen)
    ReDim Temp(1 To NumElems) As String

    For i = 1 To NumElems
       Temp(i) = Mid(str, ((i - 1) * StrLen) + 1, StrLen)
    Next i

    StringToArray = Temp
End Function
Private Function LCSmatrix(s1() As String, s2() As String)
'Longest Common subsequence matrix

Dim i As Long
Dim j As Long
Dim l1 As Long
Dim l2 As Long
Dim d() As Long
Dim max1 As Long
Dim max2 As Long

l1 = UBound(s1)
l2 = UBound(s2)
ReDim d(l1, l2)
'For i = 0 To l1
'    d(i, 0) = 0
'Next
'For j = 0 To l2
'    d(0, j) = 0
'Next
For i = 1 To l1
    For j = 1 To l2
        If s1(i) = s2(j) Then
            d(i, j) = d(i - 1, j - 1) + 1
        Else
            max1 = d(i - 1, j)
            max2 = d(i, j - 1)
            If max1 > max2 Then
                d(i, j) = max1
            Else
                d(i, j) = max2
            End If
        End If
    Next
Next
LCSmatrix = d()
End Function
Public Function LCSlength(s1 As String, s2 As String)
'Longest Common subsequence length
Dim l1 As Long
Dim l2 As Long

l1 = Len(s1)
l2 = Len(s2)

LCSlength = LCSmatrix(StringToArray(s1, 1), StringToArray(s2, 1))(l1, l2)

End Function
Public Function LCSdistance(s1 As String, s2 As String)
'Longest Common subsequence edit (text) distance
'Distance between two strings in terms of number of insertions or deletions

LCSdistance = Len(s1) + Len(s2) - 2 * Abs(LCSlength(s1, s2))
End Function

Public Function LCSstring(s1 As String, s2 As String)
'Longest Common subsequence length
Dim i As Long
Dim j As Long
Dim l1 As Long
Dim l2 As Long
Dim index As Long
Dim LCSm() As Long
Dim stringArray() As String

l1 = Len(s1)
l2 = Len(s2)

LCSm = LCSmatrix(StringToArray(s1, 1), StringToArray(s2, 1))
index = LCSm(l1, l2)

i = l1
j = l2

ReDim stringArray(index)

While i > 0 And j > 0
    If Mid(s1, i, 1) = Mid(s2, j, 1) Then
        stringArray(index) = Mid(s1, i, 1)
        i = i - 1
        j = j - 1
        index = index - 1
        
    ElseIf LCSm(i - 1, j) > LCSm(i, j - 1) Then
        i = i - 1
    Else
        j = j - 1
    End If
Wend

LCSstring = Join(stringArray, "")

End Function

Public Sub printDiff(LCSm As Variant, s1() As String, s2() As String, i As Long, j As Long)
    
    If i > 0 Or j > 0 Then
        If i = 0 Then
            printDiff vaTable, aOriginal, aRevised, i, j - 1
            Debug.Print "+" & Space(1) & aRevised(j)
        ElseIf j = 0 Then
            printDiff vaTable, aOriginal, aRevised, i - 1, j
            Debug.Print "-" & Space(1) & aOriginal(i)
        Else
            If aOriginal(i) = aRevised(j) Then
                printDiff vaTable, aOriginal, aRevised, i - 1, j - 1
                Debug.Print Space(2) & aOriginal(i)
            ElseIf vaTable(i, j - 1) >= vaTable(i - 1, j) Then
                printDiff vaTable, aOriginal, aRevised, i, j - 1
                Debug.Print "+" & Space(1) & aRevised(j)
            ElseIf vaTable(i, j - 1) < vaTable(i - 1, j) Then
                printDiff vaTable, aOriginal, aRevised, i - 1, j
                Debug.Print "-" & Space(1) & aOriginal(i)
            Else
                Debug.Print
            End If
        End If
    End If
        
End Sub
Sub LCSdiff(s1() As String, s2() As String)
'Longest Common subsequence length
Dim i As Long
Dim j As Long
'Dim l1 As Long
'Dim l2 As Long
Dim index As Long
Dim LCSm() As Long
Dim stringArray() As String

'l1 = Len(s1)
'l2 = Len(s2)

LCSm = LCSmatrix(s1, s2)
'index = LCSm(l1, l2)

i = UBound(s1)
j = UBound(s2)

'ReDim stringArray(index)

While i > 0 And j > 0
    If i = 0 Then
        Debug.Print "+" & Space(1) & s2(j)
        j = j - 1
    ElseIf j = 0 Then
        Debug.Print "+" & Space(1) & s1(i)
        i = i - 1
    Else
        If s1(i) = s2(j) Then
            Debug.Print Space(2) & s1(i)
            i = i - 1
            j = j - 1
        ElseIf LCSm(i, j - 1) >= LCSm(i - 1, j) Then
            Debug.Print "+" & Space(1) & s2(j)
            j = j - 1
        Else
            Debug.Print "-" & Space(1) & s1(i)
            i = i - 1
        End If
    End If
Wend

End Sub
Public Function rngToStrArr(rng As Range) As String()
    rngToStrArr = Split(vbTab & Join(Application.Transpose(rng), vbTab), vbTab) 'vbTab & - padding one element for purpose
End Function

Sub test()
'    a1 = rngToStrArr(Range("L5:L8"))
'    a2 = rngToStrArr(Range("M5:M8"))
    Call LCSdiff(rngToStrArr(Range("L5:L8")), rngToStrArr(Range("M5:M8")))
End Sub
